/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                           */
/*                  This file is part of the program and library             */
/*         SCIP --- Solving Constraint Integer Programs                      */
/*                                                                           */
/*                  2002-2015 Konrad-Zuse-Zentrum                            */
/*                            fuer Informationstechnik Berlin                */
/*                                                                           */
/*  SCIP is distributed under the terms of the ZIB Academic License.         */
/*                                                                           */
/*  You should have received a copy of the ZIB Academic License              */
/*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      */
/*                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**@file   interfaces.dxy
 * @brief  interface documentation page
 * @author Stefan Heinz
 */

/*--+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/

/**@page INTERFACES Interfaces
 *
 * There are several ways of accessing the \SCIP Optimization Suite from other software packages or programming
 * platforms.
 *
 *
 * @section FILEFORMATS File formats
 *
 *  The easiest way to load a problem into \SCIP is via an input file, given in a format that \SCIP can parse directly,
 *  see SHELL.  \SCIP is capable of reading more than ten different file formats, including formats for nonlinear
 *  problems and constraint programs. This gives researchers from different communities an easy, first access to the
 *  \SCIP Optimization Suite. See \ref AVAILABLEFORMATS "List of readable file formats".
 *
 *
 * @section CPLUSPLUS C++ wrapper
 *
 * Since SCIP is written in C, its callable library can be directly accessed from C++. If a user wants to program own
 * plugins in C++, there are wrapper classes for all different types of plugins available in the <code>src/objscip</code>
 * directory of the \SCIP standard distribution. See also <a href=annotated.php>Wrapper Classes</a>.
 *
 *
 * @section MODELLING Modeling languages and Matlab interface
 *
 * A natural way of formulating an optimization problem is to use a modeling language. Besides ZIMPL there are several
 * other modeling tools with a direct interface to \SCIP. These include <a href="http://dynadec.com/">Comet</a>, a
 * modeling language for constraint programming, <a href="http://www.ampl.com/">AMPL</a> and <a
 * href="http://www.gams.com/">GAMS</a>, which are well-suited for modeling mixed-integer linear and nonlinear
 * optimization problems, and <a href="https://projects.coin-or.org/Cmpl">CMPL</a> for mixed-integer linear problems.
 * The AMPL, GAMS, and ZIMPL interfaces are included in the SCIP distribution, the GAMS interface originated <a
 * href="https://projects.coin-or.org/GAMSlinks">here</a>.
 *
 * With \SCIP 3.0, a first beta version of a functional MATLAB interface has been released.  It supports solving MIPs
 * and LPs defined by Matlab's matrix and vector types. The <a href="http://www.i2c2.aut.ac.nz/Wiki/OPTI/index.php">OPTI
 * project</a> by Jonathan Currie provides an external MATLAB interface for the \SCIP Optimization Suite. On top of this,
 * <a href="http://users.isy.liu.se/johanl/yalmip/pmwiki.php?n=Main.HomePage">YALMIP</a> by Johan L&ouml;fberg provides a
 * free modeling language.
 *
 * @section OTHER Python and Java interfaces
 *
 * With \SCIP 3.1, beta versions of a \ref JNI_INTERFACE "Java native interface" and a \ref PYTHON_INTERFACE "Python interface" have been released.
 *
 * There are also several third-party python interfaces to the \SCIP Optimization Suite, e.g., <a
 * href="http://numberjack.ucc.ie/">NUMBERJACK</a> and <a
 * href="http://code.google.com/p/python-zibopt/">python-zibopt</a>. <a href="http://numberjack.ucc.ie/">NUMBERJACK</a>
 * is a constraint programming platform implemented in python. It supports a variety of different solvers, one of them
 * being the \SCIP Optimization Suite. <a href="http://code.google.com/p/python-zibopt/">python-zibopt</a> was developed
 * by Ryan J. O'Neil and is a python extension of the \SCIP Optimization Suite. <a
 * href="http://picos.zib.de/">PICOS</a> is a python interface for conic optimization, provided by Guillaume Sagnol.
 *
 *
 */


