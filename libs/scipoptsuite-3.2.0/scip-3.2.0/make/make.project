#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#*                                                                           *
#*                  This file is part of the program and library             *
#*         SCIP --- Solving Constraint Integer Programs                      *
#*                                                                           *
#*    Copyright (C) 2002-2015 Konrad-Zuse-Zentrum                            *
#*                            fuer Informationstechnik Berlin                *
#*                                                                           *
#*  SCIP is distributed under the terms of the ZIB Academic Licence.         *
#*                                                                           *
#*  You should have received a copy of the ZIB Academic License              *
#*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      *
#*                                                                           *
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#@file    Makefile
#@brief   Makefile to include in SCIP projects
#@author  Thorsten Koch
#@author  Tobias Achterberg
#@author  Marc Pfetsch
#@author  Timo Berthold

#-----------------------------------------------------------------------------
# detect host architecture
#-----------------------------------------------------------------------------
include $(SCIPDIR)/make/make.detecthost


#-----------------------------------------------------------------------------
# get real path to SCIP
#-----------------------------------------------------------------------------
ifeq ($(OSTYPE),mingw)
SCIPREALPATH	=	$(SCIPDIR)
else
SCIPREALPATH	=	$(realpath $(SCIPDIR))
endif


#-----------------------------------------------------------------------------
# default settings
#-----------------------------------------------------------------------------

#check and testing parameters
TIME     	=  	3600
NODES           =       2100000000
MEM		=	6144
THREADS         =       1
PERMUTE         =       0
DISPFREQ	=	10000
FEASTOL		=	default
TEST		=	short
SETTINGS        =       default
CONTINUE	=	false
LOCK		=	false
VALGRIND	=	false
CLIENTTMPDIR    =       /tmp
REOPT		=	false
OPTCOMMAND	=	optimize
SETCUTOFF	=	0
MAXJOBS         =       1


#compiling and linking parameters
VERBOSE		=	false
OPT		=	opt
COMP		=	gnu
LPS		=	spx
STATICLIBEXT	=	a
SHAREDLIBEXT	=	so
LIBEXT		=	$(STATICLIBEXT)
LINKER  	=	C
SHARED		=	false
NOBLKMEM	=	false
NOBUFMEM	=	false
NOBLKBUFMEM	=	false

#will this be compiled for parascip, necessary for dbg-builds and cppad to make it threadsafe
PARASCIP	=	false

#third party compiling parameters
READLINE	=	true
ZLIB		=	true
GMP		=	true
ZIMPL		=	auto
IPOPT		=	false
EXPRINT 	=	cppad
LPSOPT		=	opt
ZIMPLOPT	=	opt
IPOPTOPT	=	opt
LPSCHECK        =       false
GAMS		=	false
SPX_LEGACY  	= 	false

#compiler and linker parameters
CC		=	gcc
CC_c		=	-c # the trailing space is important
CC_o		=	-o # the trailing space is important
CXX		=	g++
CXX_c		=	-c # the trailing space is important
CXX_o		=	-o # the trailing space is important
LINKCC		=	gcc
LINKCC_L	=	-L
LINKCC_l	=	-l
LINKCC_o	=	-o # the trailing space is important
LINKCXX		=	g++
LINKCXX_L	=	-L
LINKCXX_l	=	-l
LINKCXX_o	=	-o # the trailing space is important
LINKLIBSUFFIX	=
LINKRPATH	=	-Wl,-rpath,
DCC		=	gcc
DCXX		=	g++
AR		=	ar
AR_o		=
RANLIB		=	ranlib
LIBBUILD	=	$(AR)
LIBBUILD_o	=	$(AR_o)
LIBBUILDFLAGS	=       $(ARFLAGS)

#code check and doxygen
LINT		=	flexelint
DOXY		=	doxygen
SPLINT		=       splint
#SPLINTFLAGS	=	-UNDEBUG -UWITH_READLINE -UROUNDING_FE -UWITH_GMP -UWITH_ZLIB -preproc -formatcode +skip-sys-headers -weak +relaxtypes
SPLINTFLAGS	=	-UNDEBUG -UWITH_READLINE -UROUNDING_FE -UWITH_GMP -UWITH_ZLIB -which-lib -warn-posix-headers +skip-sys-headers -preproc -formatcode -weak \
			-redef +export-header +export-local +decl-undef +relaxtypes

#third party testing parameters
CPLEX		=	cplex
CBC		=	cbc
CBCPARALLEL	=	cbc-parallel
MOSEK           =       mosek
GUROBI          =       gurobi_cl
XPRESS		=	xpress
GLPK            =       glpsol
SYMPHONY        =       symphony
BLIS            =       blis

#system parameters
SHELL		= 	bash
READ		=	read -e
LN_s		= 	ln -s

#initial compiler and linker flags
FLAGS		=	-I$(SRCDIR) -DWITH_SCIPDEF -I$(SCIPDIR)/src
OFLAGS		=
CFLAGS		=
CXXFLAGS	=
LDFLAGS		=	$(LINKCC_l)m$(LINKLIBSUFFIX)
ARFLAGS		=	cr
DFLAGS		=	-MM

GCCWARN		=	-pedantic -Wno-long-long -Wall -W -Wpointer-arith -Wcast-align -Wwrite-strings -Wshadow \
			-Wno-unknown-pragmas -Wno-unused-parameter \
			-Wredundant-decls -Wdisabled-optimization \
			-Wsign-compare -Wstrict-prototypes \
			-Wmissing-declarations -Wmissing-prototypes -Wdeclaration-after-statement

GXXWARN		=	-pedantic -Wno-long-long -Wall -W -Wpointer-arith -Wcast-align -Wwrite-strings -Wshadow \
			-Wno-unknown-pragmas -Wno-unused-parameter \
			-Wredundant-decls -Wdisabled-optimization \
			-Wctor-dtor-privacy -Wnon-virtual-dtor -Wreorder \
			-Woverloaded-virtual -Wsign-promo -Wsynth \
			-Wcast-qual -Wno-unused-parameter -Wno-strict-overflow # -Wold-style-cast -Wshadow -Wundef


BASE		=	$(OSTYPE).$(ARCH).$(COMP).$(OPT)
OBJDIR		=	obj/O.$(BASE)
BINOBJDIR	=	$(OBJDIR)/bin
LIBOBJDIR	=	$(OBJDIR)/lib
LIBOBJSUBDIRS	=	$(LIBOBJDIR)/scip \
			$(LIBOBJDIR)/objscip \
			$(LIBOBJDIR)/blockmemshell \
			$(LIBOBJDIR)/tclique \
			$(LIBOBJDIR)/lpi \
			$(LIBOBJDIR)/nlpi \
			$(LIBOBJDIR)/xml \
			$(LIBOBJDIR)/dijkstra
SRCDIR		=	src
BINDIR		=	bin
LIBDIR		=	lib
INCLUDEDIR	=	include
EXEEXTENSION	=
ALLSRC		=


#-----------------------------------------------------------------------------
# include additional make files
#-----------------------------------------------------------------------------
-include $(SCIPREALPATH)/make/make.$(BASE)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME).$(COMP)
-include $(SCIPREALPATH)/make/local/make.$(HOSTNAME).$(COMP).$(OPT)
-include $(SCIPREALPATH)/make/local/make.local


#-----------------------------------------------------------------------------
# add user flags
#-----------------------------------------------------------------------------
FLAGS		+=	$(USRFLAGS)
OFLAGS		+=	$(USROFLAGS)
CFLAGS		+=	$(USRCFLAGS)
CXXFLAGS	+=	$(USRCXXFLAGS)
LDFLAGS		+=	$(USRLDFLAGS)
ARFLAGS		+=	$(USRARFLAGS)
DFLAGS		+=	$(USRDFLAGS)


#-----------------------------------------------------------------------------
# Memory Management
#-----------------------------------------------------------------------------

ifeq ($(NOBLKBUFMEM),true)
     FLAGS		+=	-DBMS_NOBLOCKMEM -DSCIP_NOBUFFERMEM
else
  ifeq ($(NOBLKMEM),true)
       FLAGS		+=	-DBMS_NOBLOCKMEM
  endif
  ifeq ($(NOBUFMEM),true)
       FLAGS		+=	-DSCIP_NOBUFFERMEM
  endif
endif

#-----------------------------------------------------------------------------
# PARASCIP
#-----------------------------------------------------------------------------

ifeq ($(PARASCIP),false)
FLAGS		+=	-DNPARASCIP
else
LDFLAGS 	+=	-lpthread
endif


#-----------------------------------------------------------------------------
# LP Solver Interface
#-----------------------------------------------------------------------------

LPILIBNAME	=	lpi$(LPS)

ifeq ($(LPS),cpx)
LPSLDFLAGS	+=	$(LINKCC_l)cplex.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) \
                        $(LINKCC_l)pthread$(LINKLIBSUFFIX)
endif

ifeq ($(LPS),grb)
LPSLDFLAGS	+=	$(LINKCC_l)gurobi.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
endif

ifeq ($(LPS),xprs)
LPSLDFLAGS	+=	$(LINKCC_l)xpress.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX) $(LINKCC_l)dl$(LINKLIBSUFFIX)
ifneq ($(LINKRPATH),)
LDFLAGS                +=      $(LINKRPATH)$(realpath $(SCIPREALPATH)/$(LIBDIR)/xprsinc/../lib)
endif
endif

ifeq ($(LPS),msk)
LPSLDFLAGS	+=	$(LINKCC_l)mosek.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) \
			$(LINKCXX_l)iomp5.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
endif

ifeq ($(LPS),spx)
LPSLDFLAGS	+=	$(LINKCXX_l)soplex.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)$(LINKLIBSUFFIX)

ifeq ($(LPSCHECK),true)
LPSLDFLAGS	+=	$(LINKCC_l)cplex.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
endif
endif

ifeq ($(LPS),spx2)
LPSLDFLAGS  += $(LINKCXX_l)soplex.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)$(LINKLIBSUFFIX)

ifeq ($(LPSCHECK),true)
LPSLDFLAGS  += $(LINKCC_l)cplex.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
endif
endif

ifeq ($(LPS),spx132)
LPSLDFLAGS	+=	$(LINKCXX_l)soplex132.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)$(LINKLIBSUFFIX)
endif

ifeq ($(LPS),clp)
CLPDIR		= 	$(SCIPREALPATH)/$(LIBDIR)/clp.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)
# for newer Clp versions all linker flags are in share/coin/doc/Clp/clp_addlibs.txt
LPSLDFLAGS	+=	$(shell test -e $(CLPDIR)/share/coin/doc/Clp/clp_addlibs.txt && cat $(CLPDIR)/share/coin/doc/Clp/clp_addlibs.txt)
# if we could not find clp_addlibs file, try to guess linker flags
ifeq ($(LPSLDFLAGS),)
LPSLDFLAGS	+=	$(LINKCXX_L)$(CLPDIR)/lib $(LINKCXX_l)Clp$(LINKLIBSUFFIX) \
			$(LINKCXX_l)CoinUtils$(LINKLIBSUFFIX) \
			$(LINKCXX_l)bz2$(LINKLIBSUFFIX) $(LINKCXX_l)lapack$(LINKLIBSUFFIX)
endif
# ensure that also shared libraries are found while running the binary
ifneq ($(LINKRPATH),)
CLPFULLPATH	:=	$(realpath $(CLPDIR))
LPSLDFLAGS	+=	$(LINKRPATH)$(CLPFULLPATH)/lib
endif
endif

ifeq ($(LPS),qso)
LPSLDFLAGS    	+=      $(LINKCC_l)qsopt.$(OSTYPE).$(ARCH).$(COMP)$(LINKLIBSUFFIX) $(LINKCC_l)pthread$(LINKLIBSUFFIX)
endif

ifeq ($(LPS),none)
LPSLDFLAGS	+=
endif

LPILIB		=	$(LPILIBNAME).$(BASE)
LPILIBFILE	=	$(SCIPREALPATH)/lib/lib$(LPILIB).$(LIBEXT)
LPILIBSHORTLINK	=	$(SCIPREALPATH)/lib/lib$(LPILIBNAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# External Libraries
#-----------------------------------------------------------------------------

ifeq ($(ZLIB_LDFLAGS),)
ZLIB		=	false
endif

ifeq ($(ZLIB),true)
FLAGS		+=	-DWITH_ZLIB $(ZLIB_FLAGS)
LDFLAGS		+=	$(ZLIB_LDFLAGS)
endif

ifeq ($(ZIMPL),auto)
ZIMPL		=	$(GMP)
ifeq ($(ZIMPL),false)
ifeq ($(MAKELEVEL),0)
$(warning ZIMPL was deactived because of missing GMP support.)
endif
endif
endif

ifeq ($(GMP_LDFLAGS),)
GMP		=	false
endif

ifeq ($(ZIMPL),true)
ifeq ($(GMP),false)
$(error ZIMPL requires the GMP to be linked. Use either ZIMPL=false or GMP=true)
endif
LDFLAGS		+=	$(LINKCC_l)zimpl.$(OSTYPE).$(ARCH).$(COMP).$(ZIMPLOPT)$(LINKLIBSUFFIX) $(ZIMPL_LDFLAGS)
endif

ifeq ($(GMP),true)
FLAGS		+=	-DWITH_GMP $(GMP_FLAGS)
LDFLAGS		+=	$(GMP_LDFLAGS)
endif

ifeq ($(READLINE_LDFLAGS),)
READLINE	=	false
endif

ifeq ($(READLINE),true)
FLAGS		+=	-DWITH_READLINE $(READLINE_FLAGS)
LDFLAGS		+=	$(READLINE_LDFLAGS)
endif

ifeq ($(IPOPT),true)
LINKER		=	CPP
# we require here Ipopt >= 3.10.0
# - all linker flags are in share/coin/doc/Ipopt/ipopt_addlibs_cpp.txt
# - shared libraries are installed into the lib directory, so add this to the rpath
FLAGS		+=	-I$(LIBDIR)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/include/coin $(IPOPT_FLAGS)
LDFLAGS		+=	$(shell cat $(SCIPREALPATH)/$(LIBDIR)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/share/coin/doc/Ipopt/ipopt_addlibs_cpp.txt)
ifneq ($(LINKRPATH),)
LDFLAGS		+=	$(LINKRPATH)$(realpath $(SCIPREALPATH)/$(LIBDIR)/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)/lib)
endif
NLPILIBSHORTNAMEIPOPT = .ipopt
endif

ifeq ($(EXPRINT),cppad)
LINKER		=	CPP
NLPILIBSHORTNAMECPPAD = .cppad
endif

ifeq ($(GAMS),true)
LDFLAGS		+=	-ldl -lpthread
endif

#-----------------------------------------------------------------------------
# SHARED Libaries
#-----------------------------------------------------------------------------

ifeq ($(SHARED),true)
FLAGS		+=	-fPIC
LIBEXT		=	$(SHAREDLIBEXT)
ifeq ($(LINKER),CPP)
LIBBUILD	=	$(LINKCXX)
else
LIBBUILD	=	$(LINKCC)
endif
LIBBUILDFLAGS	+=      -shared
LIBBUILD_o	= 	-o # the trailing space is important
ARFLAGS		=
RANLIB		=
endif

ifneq ($(LINKRPATH),)
LDFLAGS		+=	$(LINKRPATH)$(SCIPREALPATH)/$(LIBDIR)
endif


#-----------------------------------------------------------------------------
# SCIP Library
#-----------------------------------------------------------------------------

SCIPLIBNAME	=	scip
SCIPLIB		=	$(SCIPLIBNAME).$(BASE)
SCIPLIBFILE	=	$(SCIPREALPATH)/lib/lib$(SCIPLIB).$(LIBEXT)
SCIPLIBSHARTLINK=	$(SCIPREALPATH)/lib/lib$(SCIPLIBNAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# OBJSCIP Library
#-----------------------------------------------------------------------------

OBJSCIPLIBNAME	=	objscip
OBJSCIPLIB	=	$(OBJSCIPLIBNAME).$(BASE)
OBJSCIPLIBFILE	=	$(SCIPREALPATH)/lib/lib$(OBJSCIPLIB).$(LIBEXT)
OBJSCIPLIBSHORTLINK=	$(SCIPREALPATH)/lib/lib$(OBJSCIPLIBNAME).$(LIBEXT)


#-----------------------------------------------------------------------------
# NLP interfaces and expression interpreter library
#-----------------------------------------------------------------------------

NLPILIBNAME	=	nlpi$(NLPILIBSHORTNAMECPPAD)$(NLPILIBSHORTNAMEIPOPT)
NLPILIB		=	$(NLPILIBNAME).$(BASE)
NLPILIBFILE	=	$(SCIPREALPATH)/lib/lib$(NLPILIB).$(LIBEXT)
NLPILIBSHORTLINK=	$(SCIPREALPATH)/lib/lib$(NLPILIBNAME).$(LIBEXT)
